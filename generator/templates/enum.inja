#pragma once

#include "rr/reflection/the_great_table.h"
#include "rr/types/common_actions.h"
#include "rr/types/type_actions.h"

// injected
#include "{{origin_header}}"

namespace rr {

template <>
struct TypeActions<{{name}}> {

  static TypeInfo reflect(void* value, bool is_const) {

    //clang-format off
    static constexpr ConstexprMap<{{name}}, {{length(__enums)}}> constants = {{{
        {% for item in __fields -%}
        {{"{"}}{{name}}::{{item}}, "{{item}}"},
        {%- endfor -%}
    }}};
    //clang-format on

    return Enum(static_cast<{{name}}*>(value), is_const, constants);
  }
};

template <>
TypeId TypeId::get({{name}}* /*unused*/) {
  static TypeId id(TheGreatTable::record(Actions(&TypeActions<{{name}}>::reflect,          //
                                                 &CommonActions<{{name}}>::type_name,      //
                                                 &CommonActions<{{name}}>::type_size,      //
                                                 &CommonActions<{{name}}>::alloc_default,  //
                                                 &CommonActions<{{name}}>::call_delete,    //
                                                 &CommonActions<{{name}}>::copy,           //
                                                 &CommonActions<{{name}}>::copy_default)));
  return id;
}

}  // namespace rr
